---
import Navbar from "@/layouts/Navbar.astro"
import Footer from "@/layouts/Footer.astro"

export interface Props {
  title: string
}

const { title } = Astro.props

import { LOCALES, type Lang } from "@/i18n"

const locale = Astro.currentLocale as Lang
---

<html lang={LOCALES[locale].lang || locale}>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="Resolve" />
    <title>Resolve- {title}</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Raleway:wght@100;200;300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/node_modules/@fortawesome/fontawesome-free/css/all.min.css" />

    <link rel="stylesheet" href="/public/style/custom.css" />
  </head>
  <body
    class="overflow-hidden overflow-y-auto bg-base dark:bg-base-dark text-accent dark:text-accent-light min-h-screen"
  >
    <Navbar />
    <slot />
    <Footer />
  </body>
  <script>
    detectSystemTheme()

    const switchTheme = document.querySelector(
      "[data-switch-theme]",
    ) as HTMLButtonElement
    switchTheme.addEventListener("click", (e) => {
      e.preventDefault()
      changeThemeManually()
    })

    function changeThemeManually() {
      const localAppTheme = localStorage.getItem("theme")
      if (localAppTheme === "light") {
        changeThemeToDark()
      }
      if (localAppTheme === "dark") {
        changeThemeToLight()
      }
      if (!localAppTheme) {
        console.log("previously it was not set")
        detectSystemTheme(true)
      }
    }

    function detectSystemTheme(manual = false) {
      if (
        localStorage.getItem("theme") === "dark" ||
        (!("theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("dark")
        if (manual) localStorage.setItem("theme", "dark")
      } else {
        document.documentElement.classList.remove("dark")
        if (manual) localStorage.setItem("theme", "light")
      }
    }

    function changeThemeToDark() {
      localStorage.setItem("theme", "dark")
      document.documentElement.classList.add("dark")
    }

    function changeThemeToLight() {
      localStorage.setItem("theme", "light")
      document.documentElement.classList.remove("dark")
    }

    const toggleMenu = document.querySelector(
      "[data-toggle-nav]",
    ) as HTMLButtonElement
    const navbar = document.querySelector("[data-navbar]") as HTMLDivElement
    const overlayNav = document.querySelector(
      "[data-nav-overlay]",
    ) as HTMLDivElement
    if (toggleMenu) {
      toggleMenu.addEventListener("click", (e) => {
        e.preventDefault()
        if (toggleMenu.getAttribute("data-open-nav") === "false") {
          toggleMenu.setAttribute("data-open-nav", "true")
          overlayNav.setAttribute("data-is-visible", "true")
          document.body.classList.add("!overflow-y-hidden")
          navbar.style.height = `${navbar.scrollHeight + 20}px`
        } else {
          toggleMenu.setAttribute("data-open-nav", "false")
          overlayNav.setAttribute("data-is-visible", "false")
          document.body.classList.remove("!overflow-y-hidden")
          navbar.style.height = "0px"
        }
      })

      navbar.addEventListener("click", () => {
        toggleMenu.setAttribute("data-open-nav", "false")
        overlayNav.setAttribute("data-is-visible", "false")
        document.body.classList.remove("!overflow-y-hidden")
        navbar.style.height = "0px"
      })

      overlayNav.addEventListener("click", () => {
        toggleMenu.setAttribute("data-open-nav", "false")
        overlayNav.setAttribute("data-is-visible", "false")
        document.body.classList.remove("!overflow-y-hidden")
        navbar.style.height = "0px"
      })
    }
  </script>
</html>
